K <- dim(fl$lambda)[3]
fl <- fl[!(names(fl) %in% c("lambda","log_lik","ho_log_lik","lp__"))]
par_means <- lapply(fl, smart.mean)
profiles <- c()
for(p in seq_along(par_means)){
par_name <- names(par_means)[p]
par_type <- substr(par_name, 1, nchar(par_name)-1)
if(par_type %in% c("pi","rho")){
profiles <- rbind(profiles, c(par_name, "prob", as.character(round(par_means[[p]],3))))
}
if(par_type %in% c("omega")){
mean_prob <- apply(par_means[[p]], 2, mean)
col_max <- apply(par_means[[p]], 2, max)
col_min <- apply(par_means[[p]], 2, min)
signif_more <- apply(apply(par_means[[p]], 1, function(x){x > mean_prob + 0.01 & x %in% col_max}), 2, which)
signif_less <- apply(apply(par_means[[p]], 1, function(x){x < mean_prob - 0.01 & x %in% col_min}), 2, which)
profiles <- rbind(profiles,
c(par_name, "most_prob", apply(par_means[[p]], 1, which.max)),
c(par_name, "sig_more", sapply(signif_more, paste, collapse=" ")),
c(par_name, "sig_less", sapply(signif_less, paste, collapse=" ")))
}
}
profiles
}
construct.profiles(fl10)
paste("\","r"")
paste("\","r")
par_name <- paste("#",par_type,"_",substr(par_name, nchar(par_name), nchar(par_name)), sep="")
par_name
construct.profiles <- function(fl){
K <- dim(fl$lambda)[3]
fl <- fl[!(names(fl) %in% c("lambda","log_lik","ho_log_lik","lp__"))]
par_means <- lapply(fl, smart.mean)
profiles <- c()
for(p in seq_along(par_means)){
par_type <- substr(par_name, 1, nchar(par_name)-1)
par_name <- paste("#",par_type,"_",substr(par_name, nchar(par_name), nchar(par_name)), sep="")
if(par_type %in% c("pi","rho")){
profiles <- rbind(profiles, c(par_name, "Prob.", as.character(round(par_means[[p]],3))))
}
if(par_type %in% c("omega")){
mean_prob <- apply(par_means[[p]], 2, mean)
col_max <- apply(par_means[[p]], 2, max)
col_min <- apply(par_means[[p]], 2, min)
signif_more <- apply(apply(par_means[[p]], 1, function(x){x > mean_prob + 0.01 & x %in% col_max}), 2, which)
signif_less <- apply(apply(par_means[[p]], 1, function(x){x < mean_prob - 0.01 & x %in% col_min}), 2, which)
profiles <- rbind(profiles,
c(par_name, "Highest Prob.", apply(par_means[[p]], 1, which.max)),
c(par_name, "Sig. More", sapply(signif_more, paste, collapse=" ")),
c(par_name, "Sig. Less", sapply(signif_less, paste, collapse=" ")))
}
}
profiles
}
construct.profiles(fl10)
construct.profiles <- function(fl){
K <- dim(fl$lambda)[3]
fl <- fl[!(names(fl) %in% c("lambda","log_lik","ho_log_lik","lp__"))]
par_means <- lapply(fl, smart.mean)
profiles <- c()
for(p in seq_along(par_means)){
par_name <- names(par_means)[p]
par_type <- substr(par_name, 1, nchar(par_name)-1)
par_name <- paste("#",par_type,"_",substr(par_name, nchar(par_name), nchar(par_name)), sep="")
if(par_type %in% c("pi","rho")){
profiles <- rbind(profiles, c(par_name, "Prob.", as.character(round(par_means[[p]],3))))
}
if(par_type %in% c("omega")){
mean_prob <- apply(par_means[[p]], 2, mean)
col_max <- apply(par_means[[p]], 2, max)
col_min <- apply(par_means[[p]], 2, min)
signif_more <- apply(apply(par_means[[p]], 1, function(x){x > mean_prob + 0.01 & x %in% col_max}), 2, which)
signif_less <- apply(apply(par_means[[p]], 1, function(x){x < mean_prob - 0.01 & x %in% col_min}), 2, which)
profiles <- rbind(profiles,
c(par_name, "Highest Prob.", apply(par_means[[p]], 1, which.max)),
c(par_name, "Sig. More", sapply(signif_more, paste, collapse=" ")),
c(par_name, "Sig. Less", sapply(signif_less, paste, collapse=" ")))
}
}
profiles
}
construct.profiles(fl10)
construct.profiles <- function(fl){
K <- dim(fl$lambda)[3]
fl <- fl[!(names(fl) %in% c("lambda","log_lik","ho_log_lik","lp__"))]
par_means <- lapply(fl, smart.mean)
profiles <- c()
for(p in seq_along(par_means)){
par_name <- names(par_means)[p]
par_type <- substr(par_name, 1, nchar(par_name)-1)
par_name <- paste("#",par_type,"_",substr(par_name, nchar(par_name), nchar(par_name)), sep="")
if(par_type == "pi"){
profiles <- rbind(profiles, c(par_name, "Prob.", as.character(round(par_means[[p]],3))))
}
if(par_type == "rho"){
profiles <- rbind(profiles, c(par_name, "Rate", as.character(round(par_means[[p]],3))))
}
if(par_type %in% c("omega")){
mean_prob <- apply(par_means[[p]], 2, mean)
col_max <- apply(par_means[[p]], 2, max)
col_min <- apply(par_means[[p]], 2, min)
signif_more <- apply(apply(par_means[[p]], 1, function(x){x > mean_prob + 0.01 & x %in% col_max}), 2, which)
signif_less <- apply(apply(par_means[[p]], 1, function(x){x < mean_prob - 0.01 & x %in% col_min}), 2, which)
profiles <- rbind(profiles,
c(par_name, "Highest Prob.", apply(par_means[[p]], 1, which.max)),
c(par_name, "Sig. More", sapply(signif_more, paste, collapse=" ")),
c(par_name, "Sig. Less", sapply(signif_less, paste, collapse=" ")))
}
}
profiles
}
construct.profiles(fl10)
construct.profiles(fl5)
construct.profiles(fl5)
load("~/Dropbox/1_proj/hertz/code/out/results_sample_dl_with_ho_hertz_bin-geom-mult_mm_K20_eta-0.1.RData")
fl20 <- fl
load("~/Dropbox/1_proj/hertz/code/out/results_sample_dl_with_ho_hertz_bin-geom-mult_mm_K12_eta-0.1.RData")
fl12 <- fl
load("~/Dropbox/1_proj/hertz/code/out/results_sample_dl_with_ho_hertz_bin-geom-mult_mm_K10_eta-0.1.RData")
fl10 <- fl
load("~/Dropbox/1_proj/hertz/code/out/results_sample_dl_with_ho_hertz_bin-geom-mult_mm_K8_eta-0.1.RData")
fl8 <- fl
load("~/Dropbox/1_proj/hertz/code/out/results_sample_dl_with_ho_hertz_bin-geom-mult_mm_K6_eta-0.1.RData")
fl6 <- fl
load("~/Dropbox/1_proj/hertz/code/out/results_sample_dl_with_ho_hertz_bin-geom-mult_mm_K5_eta-0.1.RData")
fl5 <- fl
load("~/Dropbox/1_proj/hertz/code/out/results_sample_dl_with_ho_hertz_bin-geom-mult_mm_K4_eta-0.1.RData")
fl4 <- fl
load("~/Dropbox/1_proj/hertz/code/out/results_sample_dl_with_ho_hertz_bin-geom-mult_mm_K3_eta-0.1.RData")
fl3 <- fl
load("~/Dropbox/1_proj/hertz/code/out/results_sample_dl_with_ho_hertz_bin-geom-mult_mm_K2_eta-0.1.RData")
fl2 <- fl
par(mfrow=c(1,1), mai=c(0.65,0.65,0.2,0.1), mgp=c(2.2,0.8,0))
plot(c(2,3,4,5,8,10,12,20),
c(mean(fl2$ho_log_lik),mean(fl3$ho_log_lik), mean(fl5$ho_log_lik), mean(fl4$ho_log_lik),
mean(fl8$ho_log_lik), mean(fl10$ho_log_lik), mean(fl12$ho_log_lik), mean(fl20$ho_log_lik))/100000,
type="l", ylab="Predictive Log-likelihood", xlab="Number of Latent Traits")
points(c(2,3,4,5,8,10,12,20),
c(mean(fl2$ho_log_lik),mean(fl3$ho_log_lik), mean(fl5$ho_log_lik), mean(fl4$ho_log_lik),
mean(fl8$ho_log_lik), mean(fl10$ho_log_lik), mean(fl12$ho_log_lik), mean(fl20$ho_log_lik))/100000)
par(mfrow=c(1,1), mai=c(0.65,0.65,0.2,0.1), mgp=c(2.2,0.8,0))
plot(c(2,3,4,5,6,8,10,12,20),
c(mean(fl2$ho_log_lik),mean(fl3$ho_log_lik), mean(fl4$ho_log_lik), mean(fl5$ho_log_lik), mean(fl6$ho_log_lik),
mean(fl8$ho_log_lik), mean(fl10$ho_log_lik), mean(fl12$ho_log_lik), mean(fl20$ho_log_lik))/100000,
type="l", ylab="Predictive Log-likelihood", xlab="Number of Latent Traits")
points(c(2,3,4,5,6,8,10,12,20),
c(mean(fl2$ho_log_lik),mean(fl3$ho_log_lik), mean(fl4$ho_log_lik), mean(fl5$ho_log_lik), mean(fl6$ho_log_lik),
mean(fl8$ho_log_lik), mean(fl10$ho_log_lik), mean(fl12$ho_log_lik), mean(fl20$ho_log_lik))/100000)
require(methods)
rstan:::rstudio_stanc("Dropbox/1_proj/hertz/code/stan/testing_lc.stan")
rstan:::rstudio_stanc("Dropbox/1_proj/hertz/code/stan/testing_lc.stan")
rstan:::rstudio_stanc("Dropbox/1_proj/hertz/code/stan/testing_lc.stan")
rstan:::rstudio_stanc("Dropbox/1_proj/hertz/code/stan/testing_lc.stan")
rstan:::rstudio_stanc("Dropbox/1_proj/hertz/code/stan/testing_lc.stan")
rstan:::rstudio_stanc("Dropbox/1_proj/hertz/code/stan/testing_lc.stan")
rstan:::rstudio_stanc("Dropbox/1_proj/hertz/code/stan/testing_lc.stan")
rstan:::rstudio_stanc("Dropbox/1_proj/hertz/code/stan/testing_lc.stan")
rstan:::rstudio_stanc("Dropbox/1_proj/hertz/code/stan/testing_lc.stan")
rstan:::rstudio_stanc("Dropbox/1_proj/hertz/code/stan/testing_lc.stan")
rstan:::rstudio_stanc("Dropbox/1_proj/hertz/code/stan/testing_lc.stan")
rstan:::rstudio_stanc("Dropbox/1_proj/hertz/code/stan/testing_lc.stan")
rstan:::rstudio_stanc("Dropbox/1_proj/hertz/code/stan/testing_lc.stan")
rstan:::rstudio_stanc("Dropbox/1_proj/hertz/code/stan/testing_lc.stan")
rstan:::rstudio_stanc("Dropbox/1_proj/hertz/code/stan/testing_lc.stan")
rstan:::rstudio_stanc("Dropbox/1_proj/hertz/code/stan/testing_lc.stan")
rstan:::rstudio_stanc("Dropbox/1_proj/hertz/code/stan/testing_lc.stan")
rstan:::rstudio_stanc("Dropbox/1_proj/hertz/code/stan/testing_lc.stan")
rstan:::rstudio_stanc("Dropbox/1_proj/hertz/code/stan/testing_lc.stan")
install.packages("imager")
install.packages('psych')
require(psych)
x <- matrix(rnorm(1000),ncol=10)
corr.test(x)
row.names(x) <- as.character(1:100)
corr.test(x)
x
corr.test(x)
dim(x)
corr.test(as.data.frame(x))
require(ggplot2)
# load("~/Dropbox/1_proj/dashboards/ver2/out/sfp/gppm-mf_fl_ho.RData")
# load("~/Dropbox/1_proj/dashboards/ver2/out/corlife/sc_gppm/fl_ho.RData")
# load("~/Dropbox/1_proj/dashboards/asim/ver2/out/sfp/gppm-mf_fl_full.RData")
# load("~/Dropbox/1_proj/dashboards/ver2/out/sim/bgnbd/gppm_bgnbddata.RData",compress=T)
load("~/Dropbox/1_proj/dashboards/ver2/r/sim/prev/lifeshort_sim_out.RData")
attach(fl)
dashdf <- rbind(data.frame(t=1:ncol(alpha_long),
plot="Calendar, Long-run",
med=apply(alpha_long,2,median),
lower=apply(alpha_long,2,quantile,probs=0.05),
upper=apply(alpha_long,2,quantile,probs=0.95)),
data.frame(t=1:ncol(alpha_short),
plot="Calendar, Short-run",
med=apply(alpha_short,2,median),
lower=apply(alpha_short,2,quantile,probs=0.05),
upper=apply(alpha_short,2,quantile,probs=0.95)),
data.frame(t=1:ncol(alpha_week),
plot="Calendar, Weekly",
med=apply(alpha_week,2,median),
lower=apply(alpha_week,2,quantile,probs=0.05),
upper=apply(alpha_week,2,quantile,probs=0.95)),
data.frame(t=1:ncol(alpha_rec),
plot="Recency",
med=apply(alpha_rec,2,median),
lower=apply(alpha_rec,2,quantile,probs=0.05),
upper=apply(alpha_rec,2,quantile,probs=0.95)),
data.frame(t=1:ncol(alpha_lifelong),
plot="Lifetime, Long",
med=apply(alpha_lifelong,2,median),
lower=apply(alpha_lifelong,2,quantile,probs=0.05),
upper=apply(alpha_lifelong,2,quantile,probs=0.95)),
data.frame(t=1:ncol(alpha_lifeshort),
plot="Lifetime, Short",
med=apply(alpha_lifeshort,2,median),
lower=apply(alpha_lifeshort,2,quantile,probs=0.05),
upper=apply(alpha_lifeshort,2,quantile,probs=0.95)),
data.frame(t=1:ncol(alpha_pnum),
plot="Purchase Number",
med=apply(alpha_pnum,2,median),
lower=apply(alpha_pnum,2,quantile,probs=0.05),
upper=apply(alpha_pnum,2,quantile,probs=0.95)))
detach(fl)
colvec <- c("blue","red","goldenrod1","green3","darkorchid2","cyan")
colvec <- c(rep("blue2",3),rep("red2",4))
# colvec <- rep("red3",6)
ggplot(dashdf,aes(x=t,y=med,color=plot))+
geom_line()+
facet_wrap(~plot,ncol=3,scales="free")+
geom_ribbon(aes(ymin=lower,ymax=upper,fill=plot),alpha=0.1,color=NA)+
scale_color_manual(values=colvec)+
scale_fill_manual(values=colvec)+
ylab("Function Value")+
xlab("Input")+
theme_bw()+
theme(legend.position="none")
require(ggplot2)
# load("~/Dropbox/1_proj/dashboards/ver2/out/sfp/gppm-mf_fl_ho.RData")
# load("~/Dropbox/1_proj/dashboards/ver2/out/corlife/sc_gppm/fl_ho.RData")
# load("~/Dropbox/1_proj/dashboards/asim/ver2/out/sfp/gppm-mf_fl_full.RData")
# load("~/Dropbox/1_proj/dashboards/ver2/out/sim/bgnbd/gppm_bgnbddata.RData",compress=T)
load("~/Dropbox/1_proj/dashboards/ver2/r/sim/prev/sim_out.RData")
attach(fl)
dashdf <- rbind(data.frame(t=1:ncol(alpha_long),
plot="Calendar, Long-run",
med=apply(alpha_long,2,median),
lower=apply(alpha_long,2,quantile,probs=0.05),
upper=apply(alpha_long,2,quantile,probs=0.95)),
data.frame(t=1:ncol(alpha_short),
plot="Calendar, Short-run",
med=apply(alpha_short,2,median),
lower=apply(alpha_short,2,quantile,probs=0.05),
upper=apply(alpha_short,2,quantile,probs=0.95)),
data.frame(t=1:ncol(alpha_week),
plot="Calendar, Weekly",
med=apply(alpha_week,2,median),
lower=apply(alpha_week,2,quantile,probs=0.05),
upper=apply(alpha_week,2,quantile,probs=0.95)),
data.frame(t=1:ncol(alpha_rec),
plot="Recency",
med=apply(alpha_rec,2,median),
lower=apply(alpha_rec,2,quantile,probs=0.05),
upper=apply(alpha_rec,2,quantile,probs=0.95)),
data.frame(t=1:ncol(alpha_lifelong),
plot="Lifetime, Long",
med=apply(alpha_lifelong,2,median),
lower=apply(alpha_lifelong,2,quantile,probs=0.05),
upper=apply(alpha_lifelong,2,quantile,probs=0.95)),
data.frame(t=1:ncol(alpha_lifeshort),
plot="Lifetime, Short",
med=apply(alpha_lifeshort,2,median),
lower=apply(alpha_lifeshort,2,quantile,probs=0.05),
upper=apply(alpha_lifeshort,2,quantile,probs=0.95)),
data.frame(t=1:ncol(alpha_pnum),
plot="Purchase Number",
med=apply(alpha_pnum,2,median),
lower=apply(alpha_pnum,2,quantile,probs=0.05),
upper=apply(alpha_pnum,2,quantile,probs=0.95)))
detach(fl)
colvec <- c("blue","red","goldenrod1","green3","darkorchid2","cyan")
colvec <- c(rep("blue2",3),rep("red2",4))
# colvec <- rep("red3",6)
ggplot(dashdf,aes(x=t,y=med,color=plot))+
geom_line()+
facet_wrap(~plot,ncol=3,scales="free")+
geom_ribbon(aes(ymin=lower,ymax=upper,fill=plot),alpha=0.1,color=NA)+
scale_color_manual(values=colvec)+
scale_fill_manual(values=colvec)+
ylab("Function Value")+
xlab("Input")+
theme_bw()+
theme(legend.position="none")
attach(fl)
dashdf <- rbind(data.frame(t=1:ncol(alpha_long),
plot="Calendar, Long-run",
med=apply(alpha_long,2,median),
lower=apply(alpha_long,2,quantile,probs=0.05),
upper=apply(alpha_long,2,quantile,probs=0.95)),
data.frame(t=1:ncol(alpha_short),
plot="Calendar, Short-run",
med=apply(alpha_short,2,median),
lower=apply(alpha_short,2,quantile,probs=0.05),
upper=apply(alpha_short,2,quantile,probs=0.95)),
data.frame(t=1:ncol(alpha_week),
plot="Calendar, Weekly",
med=apply(alpha_week,2,median),
lower=apply(alpha_week,2,quantile,probs=0.05),
upper=apply(alpha_week,2,quantile,probs=0.95)),
data.frame(t=1:ncol(alpha_rec),
plot="Recency",
med=apply(alpha_rec,2,median),
lower=apply(alpha_rec,2,quantile,probs=0.05),
upper=apply(alpha_rec,2,quantile,probs=0.95)),
# data.frame(t=1:ncol(alpha_lifelong),
#            plot="Lifetime, Long",
#            med=apply(alpha_lifelong,2,median),
#            lower=apply(alpha_lifelong,2,quantile,probs=0.05),
#            upper=apply(alpha_lifelong,2,quantile,probs=0.95)),
# data.frame(t=1:ncol(alpha_lifeshort),
#            plot="Lifetime, Short",
#            med=apply(alpha_lifeshort,2,median),
#            lower=apply(alpha_lifeshort,2,quantile,probs=0.05),
#            upper=apply(alpha_lifeshort,2,quantile,probs=0.95)),
data.frame(t=1:ncol(alpha_life),
plot="Lifetime",
med=apply(alpha_life,2,median),
lower=apply(alpha_life,2,quantile,probs=0.05),
upper=apply(alpha_life,2,quantile,probs=0.95)),
data.frame(t=1:ncol(alpha_pnum),
plot="Purchase Number",
med=apply(alpha_pnum,2,median),
lower=apply(alpha_pnum,2,quantile,probs=0.05),
upper=apply(alpha_pnum,2,quantile,probs=0.95)))
detach(fl)
colvec <- c("blue","red","goldenrod1","green3","darkorchid2","cyan")
colvec <- c(rep("blue2",3),rep("red2",4))
# colvec <- rep("red3",6)
ggplot(dashdf,aes(x=t,y=med,color=plot))+
geom_line()+
facet_wrap(~plot,ncol=3,scales="free")+
geom_ribbon(aes(ymin=lower,ymax=upper,fill=plot),alpha=0.1,color=NA)+
scale_color_manual(values=colvec)+
scale_fill_manual(values=colvec)+
ylab("Function Value")+
xlab("Input")+
theme_bw()+
theme(legend.position="none")
require(ggplot2)
# load("~/Dropbox/1_proj/dashboards/ver2/out/sfp/gppm-mf_fl_ho.RData")
# load("~/Dropbox/1_proj/dashboards/ver2/out/corlife/sc_gppm/fl_ho.RData")
# load("~/Dropbox/1_proj/dashboards/asim/ver2/out/sfp/gppm-mf_fl_full.RData")
# load("~/Dropbox/1_proj/dashboards/ver2/out/sim/bgnbd/gppm_bgnbddata.RData",compress=T)
load("~/Dropbox/1_proj/dashboards/ver2/r/sim/lifeshort_sim_out.RData")
attach(fl)
dashdf <- rbind(data.frame(t=1:ncol(alpha_long),
plot="Calendar, Long-run",
med=apply(alpha_long,2,median),
lower=apply(alpha_long,2,quantile,probs=0.05),
upper=apply(alpha_long,2,quantile,probs=0.95)),
data.frame(t=1:ncol(alpha_short),
plot="Calendar, Short-run",
med=apply(alpha_short,2,median),
lower=apply(alpha_short,2,quantile,probs=0.05),
upper=apply(alpha_short,2,quantile,probs=0.95)),
data.frame(t=1:ncol(alpha_week),
plot="Calendar, Weekly",
med=apply(alpha_week,2,median),
lower=apply(alpha_week,2,quantile,probs=0.05),
upper=apply(alpha_week,2,quantile,probs=0.95)),
data.frame(t=1:ncol(alpha_rec),
plot="Recency",
med=apply(alpha_rec,2,median),
lower=apply(alpha_rec,2,quantile,probs=0.05),
upper=apply(alpha_rec,2,quantile,probs=0.95)),
data.frame(t=1:ncol(alpha_lifelong),
plot="Lifetime, Long",
med=apply(alpha_lifelong,2,median),
lower=apply(alpha_lifelong,2,quantile,probs=0.05),
upper=apply(alpha_lifelong,2,quantile,probs=0.95)),
data.frame(t=1:ncol(alpha_lifeshort),
plot="Lifetime, Short",
med=apply(alpha_lifeshort,2,median),
lower=apply(alpha_lifeshort,2,quantile,probs=0.05),
upper=apply(alpha_lifeshort,2,quantile,probs=0.95)),
# data.frame(t=1:ncol(alpha_life),
#            plot="Lifetime",
#            med=apply(alpha_life,2,median),
#            lower=apply(alpha_life,2,quantile,probs=0.05),
#            upper=apply(alpha_life,2,quantile,probs=0.95)),
data.frame(t=1:ncol(alpha_pnum),
plot="Purchase Number",
med=apply(alpha_pnum,2,median),
lower=apply(alpha_pnum,2,quantile,probs=0.05),
upper=apply(alpha_pnum,2,quantile,probs=0.95)))
detach(fl)
colvec <- c("blue","red","goldenrod1","green3","darkorchid2","cyan")
colvec <- c(rep("blue2",3),rep("red2",4))
# colvec <- rep("red3",6)
ggplot(dashdf,aes(x=t,y=med,color=plot))+
geom_line()+
facet_wrap(~plot,ncol=3,scales="free")+
geom_ribbon(aes(ymin=lower,ymax=upper,fill=plot),alpha=0.1,color=NA)+
scale_color_manual(values=colvec)+
scale_fill_manual(values=colvec)+
ylab("Function Value")+
xlab("Input")+
theme_bw()+
theme(legend.position="none")
shape = c(0.01, 0.1, 0.3)
rate = c(1, 0.1, 0.01)
par(mfrow=c(1,2))
from = 0.00000001
to = 10
curve(dgamma(x,shape[1],rate[1]),col=1,lty=1, from=from,to=to, ylim=c(0,0.3))
for(i in seq_along(shape)){
for(j in seq_along(rate)){
curve(dgamma(x,shape[i],rate[j]),col=i,lty=j,add=T, from=from,to=to, ylim=c(0,0.3))
}
}
curve(pgamma(x,shape[1],rate[1]),col=1,lty=1, from=from,to=to, ylim=c(0,1))
for(i in seq_along(shape)){
for(j in seq_along(rate)){
curve(pgamma(x,shape[i],rate[j]),col=i,lty=j,add=T, from=from,to=to, ylim=c(0,1))
}
}
load("~/Dropbox/6_life/NCAA 2017/model.R")
load("~/Dropbox/6_life/NCAA 2017/final_results_2017_v2.RData")
require(glmnet)
require(randomForest)
bracket
win.prob("Michigan","Louisville")
win.prob("Louisville","Michigan")
win.prob("Oregon","Michigan")
win.prob("Kansas","Michigan")
win.prob("Michigan","Kansas")
lasso
summary(lasso)
?glmnet.cv
?cv.glmnet
coef(lasso)
coef(lasso, s=lasso$lambda.min)
sim_probs[[5]]
words <- c("down-to-earth","family-oriented","small-town","honest","sincere","real","fake","wholesome","original","cheerful","depressing","sentimental","friendly","daring","trendy","exciting","boring","spirited","cool","young","old","imaginative","unique","up-to-date","old fashioned","independent","contemporary","reliable","hard working","secure","intelligent","technical","corporate","successful","leader","confident","upper class","glamorous","good looking","ugly","charming","feminine","smooth","outdoorsy","masculine","Western","tough","rugged")
sample(words)
words
write.csv(sample(words), file="random1.csv")
write.csv(sample(words), file="random2.csv")
write.csv(sample(words), file="random3.csv")
write.csv(sample(words), file="random4.csv")
write.csv(sample(words), file="random5.csv")
try(setwd("~/Dropbox/1_proj/logos/"), silent=TRUE)
try(setwd("/media/ryan/hdd/Dropbox/1_proj/logos/"), silent = TRUE)
setwd("data/new_sources/")
curlogos <- list.files("logos/")
curlogos_names <- sapply(curlogos, function(x) substr(x, start=1, stop=nchar(x)-4))
names(curlogos_names) <- NULL
fdat <- read.csv("all_combined_FINAL.csv")
fdat$logo <- fdat$name %in% curlogos_names
fdata$logo
fdat$logo
curlogos_names <- sapply(curlogos, function(x) strsplit(x, split="[.]"))
curlogos_names
curlogos_names <- sapply(curlogos, function(x) strsplit(x, split="[.]")[1])
curlogos_names
strsplit(curlogos[1])
strsplit(curlogos[1], split="[.]")
strsplit(curlogos[1], split="[.]")[[1]][1]
curlogos_names <- sapply(curlogos, function(x) strsplit(x, split="[.]")[[1]][1])
curlogos_names
names(curlogos_names) <- NULL
curlogos_names
fdat <- read.csv("all_combined_FINAL.csv")
fdat$logo <- fdat$name %in% curlogos_names
fdat$logo
fdat$name[fdat$logo == FALSE]
fdat <- read.csv("all_combined_FINAL.csv")
fdat$logo <- fdat$name %in% curlogos_names
fdat$name[fdat$logo == FALSE]
setwd("data/new_sources/")
curlogos <- list.files("logos/")
curlogos_names <- sapply(curlogos, function(x) strsplit(x, split="[.]")[[1]][1])
names(curlogos_names) <- NULL
fdat <- read.csv("all_combined_FINAL.csv")
fdat$logo <- fdat$name %in% curlogos_names
fdat$name[fdat$logo == FALSE]
try(setwd("~/Dropbox/1_proj/logos/"), silent=TRUE)
try(setwd("/media/ryan/hdd/Dropbox/1_proj/logos/"), silent = TRUE)
setwd("data/new_sources/")
curlogos <- list.files("logos/")
curlogos_names <- sapply(curlogos, function(x) strsplit(x, split="[.]")[[1]][1])
names(curlogos_names) <- NULL
fdat <- read.csv("all_combined_FINAL.csv")
fdat$logo <- fdat$name %in% curlogos_names
fdat$name[fdat$logo == FALSE]
match(fdat$name, curlogos_names)
try(setwd("~/Dropbox/1_proj/logos/"), silent=TRUE)
try(setwd("/media/ryan/hdd/Dropbox/1_proj/logos/"), silent = TRUE)
setwd("data/new_sources/")
curlogos <- list.files("logos/")
curlogos_names <- sapply(curlogos, function(x) strsplit(x, split="[.]")[[1]][1])
names(curlogos_names) <- NULL
fdat <- read.csv("all_combined_FINAL.csv")
fdat$logo <- fdat$name %in% curlogos_names
fdat$name[fdat$logo == FALSE]
fdat$logo_file <- curlogos[match(fdat$name, curlogos_names)]
fdat[1:20,]
fdat[1:20,c("name","logo_file")]
fdat$logo_url <- paste("http://www.columbia.edu/~rtd2118/logos/", fdat$logo_file)
fdat$logo_url[1:10]
fdat$logo_url <- paste("http://www.columbia.edu/~rtd2118/logos/", fdat$logo_file, sep="")
fdat$logo_url[1:10]
write(fdat, file="all_combined_FINAL_with_URLS.csv")
write.csv(fdat, file="all_combined_FINAL_with_URLS.csv")
